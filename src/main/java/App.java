/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import java.util.Map;
import java.util.HashMap;
import spark.ModelAndView;
import spark.template.velocity.VelocityTemplateEngine;
import static spark.Spark.*;

public class App {
public static void main(String[] args) {
        staticFileLocation("/public");
        String layout = "templates/layout.vtl";

        get("/", (request,response) ->{
                    Map<String,Object> model=new HashMap<String,Object>();
                    //add the template to the HashMap under the key template
                    model.put("template", "templates/index.vtl");
                    //ensure the layout.vtl and index.vtl communicate
                    return new ModelAndView(model,layout);
            },new VelocityTemplateEngine());


        //the route that will contain the list of heroes
        get("/heroes", (request,response) ->{
                    Map<String, Object> model = new HashMap<String, Object>();
                    model.put("heroes", Hero.all());
                    model.put("template", "templates/heroes.vtl");
                    return new ModelAndView(model,layout);
            },new VelocityTemplateEngine());


        

        get("/heroes/:id", (request,response) ->{
                    Map<String, Object> model = new HashMap<String, Object>();
                    //below code fetches data from the link saved in :id
                    Hero myHero = Hero.find(Integer.parseInt(request.params(":id")));
                    model.put("myHero", myHero);
                    model.put("template", "templates/hero.vtl");
                    return new ModelAndView(model,layout);
            },new VelocityTemplateEngine());
        //the route to display the squad form
        get("/squads/new", (request,response) ->{
                    Map<String, Object> model = new HashMap<String, Object>();
                    model.put("template", "templates/squad-form.vtl");
                    return new ModelAndView(model,layout);
            },new VelocityTemplateEngine());
        //the route that will process the squad form input and display the success template
        post("/squads", (request,response) -> {
                     Map<String, Object> model = new HashMap<String, Object>();
                     String title =request.queryParams("title");
                     Squad mySquad=new Squad(title);
                     model.put("template", "templates/squad-success.vtl");
                     return new ModelAndView(model,layout);
             },new VelocityTemplateEngine());

        get("/squads", (request,response) ->{
                    Map<String, Object> model = new HashMap<String, Object>();
                    model.put("squads", Squad.all());
                    model.put("template", "templates/squads.vtl");
                    return new ModelAndView(model,layout);
            },new VelocityTemplateEngine());

        get("/squads/:id", (request,response) ->{
                    Map<String, Object> model = new HashMap<String, Object>();
                    Squad squad = Squad.find(Integer.parseInt(request.params(":id")));
                    model.put("squad",squad);
                    model.put("template", "templates/squad.vtl");
                    return new ModelAndView(model,layout);
            },new VelocityTemplateEngine());

        get("/squads/:id/heroes/new", (request,response) ->{
                    Map<String, Object> model = new HashMap<String, Object>();
                    Squad squad = Squad.find(Integer.parseInt(request.params(":id")));
                    model.put("squad",squad);
                    model.put("template", "templates/squad-hero-form.vtl");
                    return new ModelAndView(model,layout);
            },new VelocityTemplateEngine());

        //the heroes route will be involved in processing the heroes form
        post("/heroes",(request,response) ->{
                     Map<String, Object> model = new HashMap<String, Object>();
                     
                     Squad squad=Squad.find(Integer.parseInt(request.queryParams("squadId")));

                     //getting inputs from the form
                     String name=request.queryParams("name");
                     String power=request.queryParams("power");
                     String weakness=request.queryParams("weakness");
                     String image=request.queryParams("image");
                     //creating instance of hero class
                     Hero myHero=new Hero(name,power,weakness,image);
                     //squad below is the squad created to store the squad according to the id
                     squad.addHero(myHero);
                     //add the squad to the hashmap under "squad"
                     model.put("squad", squad);
                     //the template to display the success page after submiting the form
                     model.put("template", "templates/success.vtl");
                     return new ModelAndView(model,layout);
             },new VelocityTemplateEngine());
}
}
